#!/usr/bin/env ruby
# vim: set filetype=ruby:
$: << File.expand_path("../../lib/", __FILE__)

require 'yaml'
require 'readline'
require 'bindot2braillegraph'
require 'optparse'
require 'pty'
require 'io/console'

FONT_TABLE = YAML.load(
  open(File.expand_path('../../fontdata/misaki.yml', __FILE__)).read +
  open(File.expand_path('../../fontdata/kanji.yml', __FILE__)).read)

def convert_text(input)
  input.split(//).reject { |c|
    FONT_TABLE[c].nil?
  }
  .map { |c|
    bindot = FONT_TABLE[c].split("\n")
    {
      width: bindot[0].size,
      height: bindot.size,
      bindot: bindot.join
    }
  }
  .map { |data|
    BinDot2BrailleGraph.convert(data[:width], data[:height], data[:bindot])
  }
  .each { |c|
    print c[0].join
  }
  .tap { puts }
  .each { |c|
    print c[1].join
  }
  .tap { puts }
end

def interactive
  begin
    while input = Readline.readline('YAPPY> ')
      case input
      when 'quit', 'exit'
        break
      else
        convert_text(input)
      end
    end
  rescue Interrupt
    puts "^C"
    retry
  end
end

def process_io(console_read, console_write, stdin)
  r_array, dummy = IO.select([console_read, stdin], [], [], 1)
  return true if r_array.nil?
  r_array.each do |rs|
    if rs == stdin
      c = stdin.getc
      if c == ?\C-c
        puts '^C'
        return false
      end
      print c
      console_write.write(c)
    else
      begin
        print rs.readpartial(1024)
      rescue EOFError, Errno::EIO
        return false
      end
    end
  end
  return true
end

command = nil

opt = OptionParser.new
opt.on('-c VAL') { |v|
  command = v
}
opt.parse!(ARGV)

if not command.nil?
  # Process.kill("INT", pid)
  PTY.spawn(command) do |r, w, pid|
    r.echo = false
    STDIN.raw do |raw_stdin|
      raw_stdin.noecho do |raw_noecho_stdin|
        while true
          if process_io(r, w, raw_noecho_stdin) == false
            break
          end
        end
      end
    end
  end
  print "\n"
elsif File.pipe?(STDIN) || File.select([STDIN], [], [], 0) != nil
  STDIN.each_line do |line|
    convert_text(line)
  end
else
  interactive
end

